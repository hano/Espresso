#! /usr/bin/env node

filename = process.env.file || "config.json"
target = process.env.target || "default";

function print_export(key, value) {
  console.log(key + "=" + JSON.stringify(value) + "; export " + key);
};

function print_drop(key, reason) {
  console.error("Warning: dropping " + key
      + (reason ? " because " + reason : "")
      + ".");
};

try {
  readFileSync = require("fs").readFileSync;
  config = JSON.parse(readFileSync(filename));
  env = config.package[target];
  env.target = target;
  env.name = config.name;
} catch (exn) {
  console.error("Error: failed to load package configuration from config.json")
  if (typeof config === "object" &&
      typeof config.package === "object") {
    if (Object.keys(config.package).length > 0) {
      console.error("Bad package target: " + target);
      console.error("Possible targets:\n  " + Object.keys(config.package).join("\n  "));
    } else {
      console.error("No package configuration found.");
    }
  } else {
    console.error(exn.stack);
  }
  process.exit(23);
};
Object.keys(env)
  .filter(function (key) {
    // please note that booleans get coerced to strings!
    // maybe we should also export ${key}_type=...
    if (typeof env[key] === "string" ||
        typeof env[key] === "boolean") {
      return true;
    } else {
      print_drop(key, "typeof is neither string nor boolean");
    };
  })
  .filter(function (key) {
    if (/^[A-Za-z]+$/.test(key)) {
      return true;
    } else {
      print_drop(key, "it doesn't match /^[A-Za-z]+$/");
    };
  })
  .forEach(function (key) {
    print_export(key, env[key]);
  });
